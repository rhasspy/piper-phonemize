#ifndef PHONEME_IDS_H_
#define PHONEME_IDS_H_

#include <map>
#include <string>
#include <vector>

#include "phonemize.hpp"
#include "shared.hpp"

namespace piper {

typedef int64_t PhonemeId;
typedef std::map<Phoneme, std::vector<PhonemeId>> PhonemeIdMap;

struct PhonemeIdConfig {
  Phoneme pad = U'_';
  Phoneme bos = U'^';
  Phoneme eos = U'$';

  // Every other phoneme id is pad
  bool interspersePad = true;

  // Add beginning of sentence (bos) symbol at start
  bool addBos = true;

  // Add end of sentence (eos) symbol at end
  bool addEos = true;

  // Map from phonemes to phoneme id(s).
  // Not set means to use DEFAULT_PHONEME_ID_MAP.
  std::shared_ptr<PhonemeIdMap> phonemeIdMap;
};

static const size_t MAX_PHONEMES = 256;

#ifdef _WIN32
// Windows codepoints
static PhonemeIdMap DEFAULT_PHONEME_ID_MAP = {
    {U'_', {0}},
    {U'^', {1}},
    {U'$', {2}},
    {U' ', {3}},
    {U'!', {4}},
    {U'\'', {5}},
    {U'(', {6}},
    {U')', {7}},
    {U',', {8}},
    {U'-', {9}},
    {U'.', {10}},
    {U':', {11}},
    {U';', {12}},
    {U'?', {13}},
    {U'a', {14}},
    {U'b', {15}},
    {U'c', {16}},
    {U'd', {17}},
    {U'e', {18}},
    {U'f', {19}},
    {U'h', {20}},
    {U'i', {21}},
    {U'j', {22}},
    {U'k', {23}},
    {U'l', {24}},
    {U'm', {25}},
    {U'n', {26}},
    {U'o', {27}},
    {U'p', {28}},
    {U'q', {29}},
    {U'r', {30}},
    {U's', {31}},
    {U't', {32}},
    {U'u', {33}},
    {U'v', {34}},
    {U'w', {35}},
    {U'x', {36}},
    {U'y', {37}},
    {U'z', {38}},
    {0x00E6, {39}},
    {0x00E7, {40}},
    {0x00F0, {41}},
    {0x00F8, {42}},
    {0x0127, {43}},
    {0x014B, {44}},
    {0x0153, {45}},
    {0x01C0, {46}},
    {0x01C1, {47}},
    {0x01C2, {48}},
    {0x01C3, {49}},
    {0x0250, {50}},
    {0x0251, {51}},
    {0x0252, {52}},
    {0x0253, {53}},
    {0x0254, {54}},
    {0x0255, {55}},
    {0x0256, {56}},
    {0x0257, {57}},
    {0x0258, {58}},
    {0x0259, {59}},
    {0x025A, {60}},
    {0x025B, {61}},
    {0x025C, {62}},
    {0x025E, {63}},
    {0x025F, {64}},
    {0x0260, {65}},
    {0x0261, {66}},
    {0x0262, {67}},
    {0x0263, {68}},
    {0x0264, {69}},
    {0x0265, {70}},
    {0x0266, {71}},
    {0x0267, {72}},
    {0x0268, {73}},
    {0x026A, {74}},
    {0x026B, {75}},
    {0x026C, {76}},
    {0x026D, {77}},
    {0x026E, {78}},
    {0x026F, {79}},
    {0x0270, {80}},
    {0x0271, {81}},
    {0x0272, {82}},
    {0x0273, {83}},
    {0x0274, {84}},
    {0x0275, {85}},
    {0x0276, {86}},
    {0x0278, {87}},
    {0x0279, {88}},
    {0x027A, {89}},
    {0x027B, {90}},
    {0x027D, {91}},
    {0x027E, {92}},
    {0x0280, {93}},
    {0x0281, {94}},
    {0x0282, {95}},
    {0x0283, {96}},
    {0x0284, {97}},
    {0x0288, {98}},
    {0x0289, {99}},
    {0x028A, {100}},
    {0x028B, {101}},
    {0x028C, {102}},
    {0x028D, {103}},
    {0x028E, {104}},
    {0x028F, {105}},
    {0x0290, {106}},
    {0x0291, {107}},
    {0x0292, {108}},
    {0x0294, {109}},
    {0x0295, {110}},
    {0x0298, {111}},
    {0x0299, {112}},
    {0x029B, {113}},
    {0x029C, {114}},
    {0x029D, {115}},
    {0x029F, {116}},
    {0x02A1, {117}},
    {0x02A2, {118}},
    {0x02B2, {119}},
    {0x02C8, {120}},
    {0x02CC, {121}},
    {0x02D0, {122}},
    {0x02D1, {123}},
    {0x02DE, {124}},
    {0x03B2, {125}},
    {0x03B8, {126}},
    {0x03C7, {127}},
    {0x1D7B, {128}},
    {0x2C71, {129}},

    {0x0030, {130}},
    {0x0031, {131}},
    {0x0032, {132}},
    {0x0033, {133}},
    {0x0034, {134}},
    {0x0035, {135}},
    {0x0036, {136}},
    {0x0037, {137}},
    {0x0038, {138}},
    {0x0039, {139}},
    {0x0327, {140}}, // combining cedilla
    {0x0303, {141}}, // combining tilde
    {0x032A, {142}}, // combining bridge below
    {0x032F, {143}}, // combining inverted breve below
    {0x0329, {144}}, // combining vertical line below
    {0x02B0, {145}},
    {0x02E4, {146}},
    {0x03B5, {147}},
    {0x2193, {148}},
    {0x0023, {149}}, // Icelandic
    {0x0022, {150}}, // Russian
    {0x2191, {151}},
    // Basque
    {0x033A, {152}},
    {0x033B, {153}},
    // Luxembourgish
    {0x0067, {154}},
    {0x02A6, {155}},
    {0x0058, {156}},
    // Czech
    {0x031D, {157}},
    {0x030A, {158}},
};

// language -> phoneme -> [id, ...]
static std::map<std::string, PhonemeIdMap> DEFAULT_ALPHABET = {
    // Ukrainian
    {"uk",
     {
         {0x005F, {0}},  {0x005E, {1}},  {0x0024, {2}},  {0x0020, {3}},
         {0x0021, {4}},  {0x0027, {5}},  {0x002C, {6}},  {0x002D, {7}},
         {0x002E, {8}},  {0x003A, {9}},  {0x003B, {10}}, {0x003F, {11}},
         {0x0430, {12}}, {0x0431, {13}}, {0x0432, {14}}, {0x0433, {15}},
         {0x0491, {16}}, {0x0434, {17}}, {0x0435, {18}}, {0x0454, {19}},
         {0x0436, {20}}, {0x0437, {21}}, {0x0438, {22}}, {0x0456, {23}},
         {0x0457, {24}}, {0x0439, {25}}, {0x043A, {26}}, {0x043B, {27}},
         {0x043C, {28}}, {0x043D, {29}}, {0x043E, {30}}, {0x043F, {31}},
         {0x0440, {32}}, {0x0441, {33}}, {0x0442, {34}}, {0x0443, {35}},
         {0x0444, {36}}, {0x0445, {37}}, {0x0446, {38}}, {0x0447, {39}},
         {0x0448, {40}}, {0x0449, {41}}, {0x044C, {42}}, {0x044E, {43}},
         {0x044F, {44}}, {0x0301, {45}}, {0x0306, {46}}, {0x0308, {47}},
         {0x2014, {48}},
     }}};

#else
// Non-Windows characters
static PhonemeIdMap DEFAULT_PHONEME_ID_MAP = {
    {U'_', {0}},
    {U'^', {1}},
    {U'$', {2}},
    {U' ', {3}},
    {U'!', {4}},
    {U'\'', {5}},
    {U'(', {6}},
    {U')', {7}},
    {U',', {8}},
    {U'-', {9}},
    {U'.', {10}},
    {U':', {11}},
    {U';', {12}},
    {U'?', {13}},
    {U'a', {14}},
    {U'b', {15}},
    {U'c', {16}},
    {U'd', {17}},
    {U'e', {18}},
    {U'f', {19}},
    {U'h', {20}},
    {U'i', {21}},
    {U'j', {22}},
    {U'k', {23}},
    {U'l', {24}},
    {U'm', {25}},
    {U'n', {26}},
    {U'o', {27}},
    {U'p', {28}},
    {U'q', {29}},
    {U'r', {30}},
    {U's', {31}},
    {U't', {32}},
    {U'u', {33}},
    {U'v', {34}},
    {U'w', {35}},
    {U'x', {36}},
    {U'y', {37}},
    {U'z', {38}},
    {U'æ', {39}},
    {U'ç', {40}},
    {U'ð', {41}},
    {U'ø', {42}},
    {U'ħ', {43}},
    {U'ŋ', {44}},
    {U'œ', {45}},
    {U'ǀ', {46}},
    {U'ǁ', {47}},
    {U'ǂ', {48}},
    {U'ǃ', {49}},
    {U'ɐ', {50}},
    {U'ɑ', {51}},
    {U'ɒ', {52}},
    {U'ɓ', {53}},
    {U'ɔ', {54}},
    {U'ɕ', {55}},
    {U'ɖ', {56}},
    {U'ɗ', {57}},
    {U'ɘ', {58}},
    {U'ə', {59}},
    {U'ɚ', {60}},
    {U'ɛ', {61}},
    {U'ɜ', {62}},
    {U'ɞ', {63}},
    {U'ɟ', {64}},
    {U'ɠ', {65}},
    {U'ɡ', {66}},
    {U'ɢ', {67}},
    {U'ɣ', {68}},
    {U'ɤ', {69}},
    {U'ɥ', {70}},
    {U'ɦ', {71}},
    {U'ɧ', {72}},
    {U'ɨ', {73}},
    {U'ɪ', {74}},
    {U'ɫ', {75}},
    {U'ɬ', {76}},
    {U'ɭ', {77}},
    {U'ɮ', {78}},
    {U'ɯ', {79}},
    {U'ɰ', {80}},
    {U'ɱ', {81}},
    {U'ɲ', {82}},
    {U'ɳ', {83}},
    {U'ɴ', {84}},
    {U'ɵ', {85}},
    {U'ɶ', {86}},
    {U'ɸ', {87}},
    {U'ɹ', {88}},
    {U'ɺ', {89}},
    {U'ɻ', {90}},
    {U'ɽ', {91}},
    {U'ɾ', {92}},
    {U'ʀ', {93}},
    {U'ʁ', {94}},
    {U'ʂ', {95}},
    {U'ʃ', {96}},
    {U'ʄ', {97}},
    {U'ʈ', {98}},
    {U'ʉ', {99}},
    {U'ʊ', {100}},
    {U'ʋ', {101}},
    {U'ʌ', {102}},
    {U'ʍ', {103}},
    {U'ʎ', {104}},
    {U'ʏ', {105}},
    {U'ʐ', {106}},
    {U'ʑ', {107}},
    {U'ʒ', {108}},
    {U'ʔ', {109}},
    {U'ʕ', {110}},
    {U'ʘ', {111}},
    {U'ʙ', {112}},
    {U'ʛ', {113}},
    {U'ʜ', {114}},
    {U'ʝ', {115}},
    {U'ʟ', {116}},
    {U'ʡ', {117}},
    {U'ʢ', {118}},
    {U'ʲ', {119}},
    {U'ˈ', {120}},
    {U'ˌ', {121}},
    {U'ː', {122}},
    {U'ˑ', {123}},
    {U'˞', {124}},
    {U'β', {125}},
    {U'θ', {126}},
    {U'χ', {127}},
    {U'ᵻ', {128}},
    {U'ⱱ', {129}},

    // tones
    {U'0', {130}},
    {U'1', {131}},
    {U'2', {132}},
    {U'3', {133}},
    {U'4', {134}},
    {U'5', {135}},
    {U'6', {136}},
    {U'7', {137}},
    {U'8', {138}},
    {U'9', {139}},
    {U'\u0327', {140}}, // combining cedilla
    {U'\u0303', {141}}, // combining tilde
    {U'\u032a', {142}}, // combining bridge below
    {U'\u032f', {143}}, // combining inverted breve below
    {U'\u0329', {144}}, // combining vertical line below
    {U'ʰ', {145}},
    {U'ˤ', {146}},
    {U'ε', {147}},
    {U'↓', {148}},
    {U'#', {149}},  // Icelandic
    {U'\"', {150}}, // Russian

    {U'↑', {151}},

    // Basque
    {U'\u033a', {152}},
    {U'\u033b', {153}},

    // Luxembourgish
    {U'g', {154}},
    {U'ʦ', {155}},
    {U'X', {156}},

    // Czech
    {U'\u031d', {157}},
    {U'\u030a', {158}},
};

// language -> phoneme -> [id, ...]
static std::map<std::string, PhonemeIdMap> DEFAULT_ALPHABET = {
    // Ukrainian
    {"uk",
     {
         {U'_', {0}},  {U'^', {1}},       {U'$', {2}},       {U' ', {3}},
         {U'!', {4}},  {U'\'', {5}},      {U',', {6}},       {U'-', {7}},
         {U'.', {8}},  {U':', {9}},       {U';', {10}},      {U'?', {11}},
         {U'а', {12}}, {U'б', {13}},      {U'в', {14}},      {U'г', {15}},
         {U'ґ', {16}}, {U'д', {17}},      {U'е', {18}},      {U'є', {19}},
         {U'ж', {20}}, {U'з', {21}},      {U'и', {22}},      {U'і', {23}},
         {U'ї', {24}}, {U'й', {25}},      {U'к', {26}},      {U'л', {27}},
         {U'м', {28}}, {U'н', {29}},      {U'о', {30}},      {U'п', {31}},
         {U'р', {32}}, {U'с', {33}},      {U'т', {34}},      {U'у', {35}},
         {U'ф', {36}}, {U'х', {37}},      {U'ц', {38}},      {U'ч', {39}},
         {U'ш', {40}}, {U'щ', {41}},      {U'ь', {42}},      {U'ю', {43}},
         {U'я', {44}}, {U'\u0301', {45}}, {U'\u0306', {46}}, {U'\u0308', {47}},
         {U'—', {48}},
     }}};

#endif

PIPERPHONEMIZE_EXPORT void
phonemes_to_ids(const std::vector<Phoneme> &phonemes, PhonemeIdConfig &config,
                std::vector<PhonemeId> &phonemeIds,
                std::map<Phoneme, std::size_t> &missingPhonemes);

} // namespace piper

#endif // PHONEME_IDS_H_
